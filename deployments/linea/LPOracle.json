{
  "address": "0x57359361a0e5351EBcE756E40Bdbaf9E3590A818",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nileAMM",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zeroPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethPriceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ethPriceFeed",
      "outputs": [
        {
          "internalType": "contract IPythAggregatorV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nileAMM",
      "outputs": [
        {
          "internalType": "contract INileAMM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "sqrt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroPriceFeed",
      "outputs": [
        {
          "internalType": "contract IPythAggregatorV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x48cb38fb4b28e8ae672238291a55347f4770d7d448bd698996235b005dfa1d1c",
  "receipt": {
    "to": null,
    "from": "0xfA44CE1cb30A793D3357536f5B95C5bf8b8565E3",
    "contractAddress": "0x57359361a0e5351EBcE756E40Bdbaf9E3590A818",
    "transactionIndex": 9,
    "gasUsed": "393294",
    "logsBloom": "0x
    "blockHash": "0x4a88ab5395a5f21f487ce02f95007700705b7249154a17f6f3039aa6efcb8db6",
    "transactionHash": "0x48cb38fb4b28e8ae672238291a55347f4770d7d448bd698996235b005dfa1d1c",
    "logs": [],
    "blockNumber": 5007538,
    "cumulativeGasUsed": "2061671",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAAA45c8F5ef92a000a121d102F4e89278a711Faa",
    "0x130cc6e0301B58ab46504fb6F83BEE97Eb733054",
    "0x3c6Cd9Cc7c7a4c2Cf5a82734CD249D7D593354dA"
  ],
  "numDeployments": 1,
  "solcInputHash": "5e4aa5b02a02fbe51dd55f10240b9241",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nileAMM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ethPriceFeed\",\"outputs\":[{\"internalType\":\"contract IPythAggregatorV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nileAMM\",\"outputs\":[{\"internalType\":\"contract INileAMM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroPriceFeed\",\"outputs\":[{\"internalType\":\"contract IPythAggregatorV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract interacts with the INileAMM interface to fetch reserves and calculate prices.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_nileAMM\":\"The address of the Nile AMM contract.\"}},\"getPrice()\":{\"details\":\"This function fetches reserves from the Nile AMM and uses a pre-defined price for tokens to calculate the LP token price.\",\"returns\":{\"price\":\"The price of the liquidity pool token.\"}},\"sqrt(uint256)\":{\"details\":\"This function uses an iterative method to compute the square root of a number.\",\"params\":{\"x\":\"The number to compute the square root of.\"},\"returns\":{\"y\":\"The square root of the given number.\"}}},\"title\":\"LPOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor sets the address of the Nile AMM contract.\"},\"getPrice()\":{\"notice\":\"Gets the price of the liquidity pool token.\"},\"sqrt(uint256)\":{\"notice\":\"Computes the square root of a given number using the Babylonian method.\"}},\"notice\":\"This contract provides a price oracle for the liquidity pool tokens in a Nile AMM.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/LPOracle.sol\":\"LPOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/INileAMM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INileAMM {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Claim(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1);\\n    event Fees(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Initialized(uint8 version);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event SetFeeSplit(uint8 toFeesOld, uint8 toTreasuryOld, uint8 toFeesNew, uint8 toTreasuryNew);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function blockTimestampLast() external view returns (uint256);\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\\n    function current(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\\n    function currentCumulativePrices() external view returns (uint256 reserve0Cumulative, uint256 reserve1Cumulative, uint256 blockTimestamp);\\n    function decimals() external view returns (uint8);\\n    function feeSplit() external view returns (uint8);\\n    function fees() external view returns (address);\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\n    function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast);\\n    function initialize(address _factory, address _token0, address _token1, bool _stable, address _voter) external;\\n    function lastObservation() external view returns (uint256 timestamp, uint256 reserve0Cumulative, uint256 reserve1Cumulative);\\n    function metadata() external view returns (uint256 dec0, uint256 dec1, uint256 r0, uint256 r1, bool st, address t0, address t1);\\n    function mint(address to) external returns (uint256 liquidity);\\n    function name() external view returns (string memory);\\n    function nonces(address account) external view returns (uint256);\\n    function observationLength() external view returns (uint256);\\n    function observations(uint256 index) external view returns (uint256 timestamp, uint256 reserve0Cumulative, uint256 reserve1Cumulative);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function prices(address tokenIn, uint256 amountIn, uint256 points) external view returns (uint256[] memory);\\n    function quote(address tokenIn, uint256 amountIn, uint256 granularity) external view returns (uint256 amountOut);\\n    function reserve0() external view returns (uint256);\\n    function reserve0CumulativeLast() external view returns (uint256);\\n    function reserve1() external view returns (uint256);\\n    function reserve1CumulativeLast() external view returns (uint256);\\n    function sample(address tokenIn, uint256 amountIn, uint256 points, uint256 window) external view returns (uint256[] memory);\\n    function setActiveGauge(bool isActive) external;\\n    function setFeeSplit() external;\\n    function skim(address to) external;\\n    function stable() external view returns (bool);\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n    function symbol() external view returns (string memory);\\n    function sync() external;\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function tokens() external view returns (address, address);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool);\\n}\\n\\n\",\"keccak256\":\"0x3f7380363a683116f1ec28285f1a113b2cf69da3f3d9eea23d57ef31377d66f0\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPythAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPythAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n    function description() external pure returns (string memory);\\n    function getAnswer(uint256) external view returns (int256);\\n    function getRoundData(uint80 _roundId) external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n    function getTimestamp(uint256) external view returns (uint256);\\n    function latestAnswer() external view returns (int256);\\n    function latestRound() external view returns (uint256);\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n    function latestTimestamp() external view returns (uint256);\\n    function priceId() external view returns (bytes32);\\n    function pyth() external view returns (address);\\n\\n    function updateFeeds(bytes[] calldata priceUpdateData) external payable;\\n    function version() external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xa891481f9a04ac90444644df0657562beba9b5fda7a4bca9efd5c2f0f71ff90b\",\"license\":\"MIT\"},\"contracts/oracle/LPOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/INileAMM.sol\\\";\\nimport \\\"../interfaces/IPythAggregatorV3.sol\\\";\\n\\n/// @title LPOracle\\n/// @notice This contract provides a price oracle for the liquidity pool tokens in a Nile AMM.\\n/// @dev This contract interacts with the INileAMM interface to fetch reserves and calculate prices.\\ncontract LPOracle {\\n    INileAMM public immutable nileAMM;\\n    IPythAggregatorV3 public immutable zeroPriceFeed;\\n    IPythAggregatorV3 public immutable ethPriceFeed;\\n\\n    /// @notice Constructor sets the address of the Nile AMM contract.\\n    /// @param _nileAMM The address of the Nile AMM contract.\\n    constructor(\\n        address _nileAMM,\\n        address _zeroPriceFeed,\\n        address _ethPriceFeed\\n    ) {\\n        nileAMM = INileAMM(_nileAMM);\\n        zeroPriceFeed = IPythAggregatorV3(_zeroPriceFeed);\\n        ethPriceFeed = IPythAggregatorV3(_ethPriceFeed);\\n    }\\n\\n    /// @notice Gets the price of the liquidity pool token.\\n    /// @dev This function fetches reserves from the Nile AMM and uses a pre-defined price for tokens to calculate the LP token price.\\n    /// @return price The price of the liquidity pool token.\\n    function getPrice() public view returns (uint256 price) {\\n        (uint256 reserve0, uint256 reserve1, ) = nileAMM.getReserves();\\n\\n        int256 priceToken0 = zeroPriceFeed.latestAnswer();\\n        int256 priceToken1 = ethPriceFeed.latestAnswer();\\n\\n        require(priceToken0 > 0 && priceToken1 > 0, \\\"Invalid Price\\\");\\n\\n        price =\\n            (2 *\\n                sqrt(reserve0 * reserve1) *\\n                sqrt(uint256(priceToken0 * priceToken1))) /\\n            nileAMM.totalSupply();\\n    }\\n\\n    /// @notice Computes the square root of a given number using the Babylonian method.\\n    /// @dev This function uses an iterative method to compute the square root of a number.\\n    /// @param x The number to compute the square root of.\\n    /// @return y The square root of the given number.\\n    function sqrt(uint x) public pure returns (uint y) {\\n        if (x == 0) return 0; // Handle the edge case for 0\\n        uint z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08ae0056406dc63c435221945b8d768e1f128f255664039349c92447fb2bbfca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161071838038061071883398101604081905261002f91610068565b6001600160a01b0392831660805290821660a0521660c0526100ab565b80516001600160a01b038116811461006357600080fd5b919050565b60008060006060848603121561007d57600080fd5b6100868461004c565b92506100946020850161004c565b91506100a26040850161004c565b90509250925092565b60805160a05160c0516106246100f46000396000818161011201526102ce0152600081816097015261023b01526000818160e3015281816101a501526103d901526106246000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806391ce579c1161005057806391ce579c146100de57806398d5fdca14610105578063af7665ce1461010d57600080fd5b8063677342ce1461006c57806389e402f114610092575b600080fd5b61007f61007a3660046104a8565b610134565b6040519081526020015b60405180910390f35b6100b97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610089565b6100b97f000000000000000000000000000000000000000000000000000000000000000081565b61007f61019e565b6100b97f000000000000000000000000000000000000000000000000000000000000000081565b60008160000361014657506000919050565b600060026101558460016104f0565b61015f9190610509565b90508291505b818110156101985790508060028161017d8186610509565b61018791906104f0565b6101919190610509565b9050610165565b50919050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610544565b509150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610572565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b9190610572565b905060008213801561036d5750600081135b6103d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420507269636500000000000000000000000000000000000000604482015260640160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190610572565b61047361007a838561058b565b61048061007a86886105d7565b61048b9060026105d7565b61049591906105d7565b61049f9190610509565b94505050505090565b6000602082840312156104ba57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610503576105036104c1565b92915050565b60008261053f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008060006060848603121561055957600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561058457600080fd5b5051919050565b808202600082127f8000000000000000000000000000000000000000000000000000000000000000841416156105c3576105c36104c1565b8181058314821517610503576105036104c1565b8082028115828204841417610503576105036104c156fea2646970667358221220f66d9bafee83d7cd10c119a47d7cfea5c4fa1fe47db37715d22c886c6a67194964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806391ce579c1161005057806391ce579c146100de57806398d5fdca14610105578063af7665ce1461010d57600080fd5b8063677342ce1461006c57806389e402f114610092575b600080fd5b61007f61007a3660046104a8565b610134565b6040519081526020015b60405180910390f35b6100b97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610089565b6100b97f000000000000000000000000000000000000000000000000000000000000000081565b61007f61019e565b6100b97f000000000000000000000000000000000000000000000000000000000000000081565b60008160000361014657506000919050565b600060026101558460016104f0565b61015f9190610509565b90508291505b818110156101985790508060028161017d8186610509565b61018791906104f0565b6101919190610509565b9050610165565b50919050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610544565b509150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610572565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b9190610572565b905060008213801561036d5750600081135b6103d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420507269636500000000000000000000000000000000000000604482015260640160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190610572565b61047361007a838561058b565b61048061007a86886105d7565b61048b9060026105d7565b61049591906105d7565b61049f9190610509565b94505050505090565b6000602082840312156104ba57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610503576105036104c1565b92915050565b60008261053f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008060006060848603121561055957600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561058457600080fd5b5051919050565b808202600082127f8000000000000000000000000000000000000000000000000000000000000000841416156105c3576105c36104c1565b8181058314821517610503576105036104c1565b8082028115828204841417610503576105036104c156fea2646970667358221220f66d9bafee83d7cd10c119a47d7cfea5c4fa1fe47db37715d22c886c6a67194964736f6c63430008140033",
  "devdoc": {
    "details": "This contract interacts with the INileAMM interface to fetch reserves and calculate prices.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_nileAMM": "The address of the Nile AMM contract."
        }
      },
      "getPrice()": {
        "details": "This function fetches reserves from the Nile AMM and uses a pre-defined price for tokens to calculate the LP token price.",
        "returns": {
          "price": "The price of the liquidity pool token."
        }
      },
      "sqrt(uint256)": {
        "details": "This function uses an iterative method to compute the square root of a number.",
        "params": {
          "x": "The number to compute the square root of."
        },
        "returns": {
          "y": "The square root of the given number."
        }
      }
    },
    "title": "LPOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor sets the address of the Nile AMM contract."
      },
      "getPrice()": {
        "notice": "Gets the price of the liquidity pool token."
      },
      "sqrt(uint256)": {
        "notice": "Computes the square root of a given number using the Babylonian method."
      }
    },
    "notice": "This contract provides a price oracle for the liquidity pool tokens in a Nile AMM.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}